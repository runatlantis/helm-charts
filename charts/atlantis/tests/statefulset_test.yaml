---
suite: test statefulset
templates:
  - configmap-config.yaml
  - configmap-repo-config.yaml
  - statefulset.yaml
chart:
  appVersion: test-appVersion
release:
  name: my-release
tests:
  - it: default values
    template: statefulset.yaml
    asserts:
      - isKind:
          of: StatefulSet
      - equal:
          path: apiVersion
          value: apps/v1
      - equal:
          path: metadata.name
          value: my-release-atlantis
      - equal:
          path: metadata.labels.app
          value: atlantis
      - matchRegex:
          path: metadata.labels.chart
          pattern: ^atlantis-
      - equal:
          path: metadata.labels.heritage
          value: Helm
      - equal:
          path: metadata.labels.release
          value: my-release
      - notExists:
          path: metadata.annotations
      - equal:
          path: spec.serviceName
          value: my-release-atlantis
      - equal:
          path: spec.replicas
          value: 1
      - equal:
          path: spec.selector
          value:
            matchLabels:
              app: atlantis
              release: my-release
      - equal:
          path: spec.template.metadata.labels
          value:
            app: atlantis
            release: my-release
      - equal:
          path: spec.template.metadata.annotations
          value:
            checksum/config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
            checksum/repo-config: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
      - notExists:
          path: spec.template.spec.hostAliases
      - equal:
          path: spec.template.spec.hostNetwork
          value: false
      - equal:
          path: spec.template.spec.serviceAccountName
          value: my-release-atlantis
      - equal:
          path: spec.template.spec.shareProcessNamespace
          value: false
      - equal:
          path: spec.template.spec.automountServiceAccountToken
          value: true
      - notExists:
          path: spec.template.spec.terminationGracePeriodSeconds
      - equal:
          path: spec.template.spec.securityContext
          value:
            fsGroup: 1000
            fsGroupChangePolicy: OnRootMismatch
            runAsUser: 100
      - notExists:
          path: spec.template.spec.priorityClassName
      - equal:
          path: spec.template.spec.volumes
          value:
            - name: atlantis-data
              persistentVolumeClaim:
                claimName: my-release-atlantis-data
      - notExists:
          path: spec.template.spec.imagePullSecrets
      - notExists:
          path: spec.template.spec.initContainers
      - equal:
          path: spec.template.spec.containers[0].name
          value: atlantis
      - equal:
          path: spec.template.spec.containers[0].image
          value: ghcr.io/runatlantis/atlantis:test-appVersion
      - equal:
          path: spec.template.spec.containers[0].imagePullPolicy
          value: Always
      - notExists:
          path: spec.template.spec.containers[0].securityContext
      - equal:
          path: spec.template.spec.containers[0].args
          value:
            - server
      - equal:
          path: spec.template.spec.containers[0].ports
          value:
            - containerPort: 4141
              name: atlantis
      - notExists:
          path: spec.template.spec.containers[0].lifeCycle
      - notExists:
          path: spec.template.spec.containers[0].envFrom
      - equal:
          path: spec.template.spec.containers[0].env
          value:
            - name: PATH
              value: /plugins:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
            - name: ATLANTIS_DATA_DIR
              value: /atlantis-data
            - name: ATLANTIS_REPO_ALLOWLIST
              value: <replace-me>
            - name: ATLANTIS_PORT
              value: "4141"
            - name: ATLANTIS_ATLANTIS_URL
              value: http://
      - equal:
          path: spec.template.spec.containers[0].livenessProbe
          value:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 4141
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
      - equal:
          path: spec.template.spec.containers[0].readinessProbe
          value:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 4141
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
      - equal:
          path: spec.template.spec.containers[0].volumeMounts
          value:
            - mountPath: /atlantis-data
              name: atlantis-data
      - isNullOrEmpty:
          path: spec.template.spec.containers[0].resources
      - notExists:
          path: spec.template.spec.nodeSelector
      - notExists:
          path: spec.template.spec.tolerations
      - notExists:
          path: spec.template.spec.topologySpreadConstraints
      - notExists:
          path: spec.template.spec.updateStrategy
      - notExists:
          path: spec.volumeClaimTemplates
  - it: custom port values
    template: statefulset.yaml
    set:
      service:
        targetPort: 8888
    asserts:
      - equal:
          path: spec.template.spec.containers[0].ports
          value:
            - containerPort: 8888
              name: atlantis
      - equal:
          path: spec.template.spec.containers[0].env
          value:
            - name: PATH
              value: /plugins:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
            - name: ATLANTIS_DATA_DIR
              value: /atlantis-data
            - name: ATLANTIS_REPO_ALLOWLIST
              value: <replace-me>
            - name: ATLANTIS_PORT
              value: "8888"
            - name: ATLANTIS_ATLANTIS_URL
              value: http://
      - equal:
          path: spec.template.spec.containers[0].livenessProbe
          value:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 8888
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
      - equal:
          path: spec.template.spec.containers[0].readinessProbe
          value:
            failureThreshold: 5
            httpGet:
              path: /healthz
              port: 8888
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 60
            successThreshold: 1
            timeoutSeconds: 5
  - it: replicaCount
    template: statefulset.yaml
    set:
      replicaCount: 2
    asserts:
      - equal:
          path: spec.replicas
          value: 2
  - it: hostAliases
    template: statefulset.yaml
    set:
      hostAliases:
        - hostnames:
            - aaa.com
            - test.ccc.com
          ip: 10.0.0.0
        - hostnames:
            - bbb.com
          ip: 10.0.0.2
    asserts:
      - equal:
          path: spec.template.spec.hostAliases
          value:
            - hostnames:
                - aaa.com
                - test.ccc.com
              ip: 10.0.0.0
            - hostnames:
                - bbb.com
              ip: 10.0.0.2
  - it: hostNetwork
    template: statefulset.yaml
    set:
      hostNetwork: true
    asserts:
      - equal:
          path: spec.template.spec.hostNetwork
          value: true
  - it: serviceAccountName
    template: statefulset.yaml
    set:
      serviceAccount.name: atlantis-sa
    asserts:
      - equal:
          path: spec.template.spec.serviceAccountName
          value: atlantis-sa
  - it: shareProcessNamespace
    template: statefulset.yaml
    set:
      statefulSet.shareProcessNamespace: true
    asserts:
      - equal:
          path: spec.template.spec.shareProcessNamespace
          value: true
  - it: automountServiceAccountToken
    template: statefulset.yaml
    set:
      serviceAccount.mount: false
    asserts:
      - equal:
          path: spec.template.spec.automountServiceAccountToken
          value: false
  - it: tlsSecretName
    template: statefulset.yaml
    set:
      tlsSecretName: test-tls
    asserts:
      - equal:
          path: spec.template.spec.volumes[1]
          value:
            name: tls
            secret:
              secretName: test-tls
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[?(@.name == "tls")]
          value:
            mountPath: /etc/tls/
            name: tls
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_SSL_CERT_FILE
            value: /etc/tls/tls.crt
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_SSL_KEY_FILE
            value: /etc/tls/tls.key
  - it: serviceAccountSecrets
    template: statefulset.yaml
    set:
      serviceAccountSecrets:
        credentials: VG9ueSBTb3ByYW5v
        credentials-staging: Q2FybWVsYSBTb3ByYW5v
    asserts:
      - equal:
          path: spec.template.spec.volumes[1]
          value:
            name: credentials-volume
            secret:
              secretName: credentials
      - equal:
          path: spec.template.spec.volumes[2]
          value:
            name: credentials-staging-volume
            secret:
              secretName: credentials-staging
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[?(@.name ==
            "credentials-volume")]
          value:
            mountPath: /etc/credentials
            name: credentials-volume
            readOnly: true
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[?(@.name ==
            "credentials-staging-volume")]
          value:
            mountPath: /etc/credentials-staging
            name: credentials-staging-volume
            readOnly: true
  - it: googleServiceAccountSecrets
    template: statefulset.yaml
    set:
      googleServiceAccountSecrets:
        - name: gcp-ci
          secretName: gcp-ci-secret
        - name: gcp-staging
          secretName: gcp-staging-secret
    asserts:
      - equal:
          path: spec.template.spec.volumes[1]
          value:
            name: gcp-ci
            secret:
              secretName: gcp-ci-secret
      - equal:
          path: spec.template.spec.volumes[2]
          value:
            name: gcp-staging
            secret:
              secretName: gcp-staging-secret
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[?(@.name == "gcp-ci")]
          value:
            mountPath: /var/secrets/gcp-ci
            name: gcp-ci
            readOnly: true
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[?(@.name == "gcp-staging")]
          value:
            mountPath: /var/secrets/gcp-staging
            name: gcp-staging
            readOnly: true
  - it: gitconfig-read-only
    template: statefulset.yaml
    set:
      gitconfig: |
        [url "https://YOUR_GH_TOKEN@github.com"]
        insteadOf = https://github.com
      gitconfigReadOnly: true
    asserts:
      - equal:
          path: spec.template.spec.volumes[1]
          value:
            name: gitconfig-volume
            secret:
              secretName: my-release-atlantis-gitconfig
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[?(@.name ==
            "gitconfig-volume")]
          value:
            mountPath: /home/atlantis/.gitconfig
            name: gitconfig-volume
            readOnly: true
            subPath: gitconfig
  - it: gitconfig-read-write
    template: statefulset.yaml
    set:
      gitconfig: |
        [url "https://YOUR_GH_TOKEN@github.com"]
        insteadOf = https://github.com
      gitconfigReadOnly: false
    asserts:
      - equal:
          path: spec.template.spec.volumes[?(@.name == "gitconfig-volume")]
          value:
            name: gitconfig-volume
            secret:
              secretName: my-release-atlantis-gitconfig
      - equal:
          path: spec.template.spec.volumes[?(@.name == "gitconfig-init")]
          value:
            name: gitconfig-init
            configMap:
              name: my-release-atlantis-gitconfig-init
              items:
                - key: gitconfig-init.sh
                  path: gitconfig-init.sh
                  mode: 0555
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[?(@.name ==
            "gitconfig-volume")]
          value:
            mountPath: /etc/.gitconfig
            name: gitconfig-volume
            readOnly: true
            subPath: gitconfig
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[?(@.name ==
            "gitconfig-init")]
          value:
            mountPath: /docker-entrypoint.d/gitconfig-init.sh
            name: gitconfig-init
            subPath: gitconfig-init.sh
  - it: gitconfigSecretName
    template: statefulset.yaml
    set:
      gitconfigSecretName: atlantis-gitconfig
    asserts:
      - equal:
          path: spec.template.spec.volumes[1]
          value:
            name: gitconfig-volume
            secret:
              secretName: atlantis-gitconfig
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[?(@.name ==
            "gitconfig-volume")]
          value:
            mountPath: /home/atlantis/.gitconfig
            name: gitconfig-volume
            readOnly: true
            subPath: gitconfig
  - it: netrc
    template: statefulset.yaml
    set:
      netrc: |
        machine artifactory.myapp.com login YOUR_USERNAME password YOUR_PASSWORD
        machine bitbucket.myapp.com login YOUR_USERNAME password YOUR_PASSWORD
    asserts:
      - equal:
          path: spec.template.spec.volumes[1]
          value:
            name: netrc-volume
            secret:
              secretName: my-release-atlantis-netrc
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[?(@.name == "netrc-volume")]
          value:
            mountPath: /home/atlantis/.netrc
            name: netrc-volume
            readOnly: true
            subPath: netrc
  - it: netrcSecretName
    template: statefulset.yaml
    set:
      netrcSecretName: atlantis-netrc
    asserts:
      - equal:
          path: spec.template.spec.volumes[1]
          value:
            name: netrc-volume
            secret:
              secretName: atlantis-netrc
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[?(@.name == "netrc-volume")]
          value:
            mountPath: /home/atlantis/.netrc
            name: netrc-volume
            readOnly: true
            subPath: netrc
  - it: aws
    template: statefulset.yaml
    set:
      aws:
        credentials: |
          [default]
          aws_access_key_id=YOUR_ACCESS_KEY_ID
          aws_secret_access_key=YOUR_SECRET_ACCESS_KEY
          region=us-east-1
        config: |
          [profile a_role_to_assume]
          role_arn = arn:aws:iam::123456789:role/service-role/roleToAssume
          source_profile = default
    asserts:
      - equal:
          path: spec.template.spec.volumes[1]
          value:
            name: aws-volume
            secret:
              secretName: my-release-atlantis-aws
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[?(@.name == "aws-volume")]
          value:
            mountPath: /home/atlantis/.aws
            name: aws-volume
            readOnly: true
  - it: aws directory
    template: statefulset.yaml
    set:
      aws:
        directory: /etc/aws_config
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: AWS_CONFIG_FILE
            value: /etc/aws_config/config
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: AWS_SHARED_CREDENTIALS_FILE
            value: /etc/aws_config/credentials
  - it: awsSecretName
    template: statefulset.yaml
    set:
      awsSecretName: atlantis-aws
    asserts:
      - equal:
          path: spec.template.spec.volumes[1]
          value:
            name: aws-volume
            secret:
              secretName: atlantis-aws
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[?(@.name == "aws-volume")]
          value:
            mountPath: /home/atlantis/.aws
            name: aws-volume
            readOnly: true
  - it: githubApp
    template: statefulset.yaml
    set:
      githubApp:
        id: 123456
        slug: foo
        key: |
          -----BEGIN PRIVATE KEY-----
          ...
          -----END PRIVATE KEY-----
        secret: baz
    asserts:
      - equal:
          path: spec.template.spec.volumes[1]
          value:
            name: github-app-key-volume
            secret:
              items:
                - key: key.pem
                  path: key.pem
              secretName: my-release-atlantis-webhook
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[?(@.name ==
            "github-app-key-volume")]
          value:
            mountPath: /var/github-app
            name: github-app-key-volume
            readOnly: true
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_GH_APP_ID
            value: "123456"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_GH_APP_SLUG
            value: foo
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_GH_WEBHOOK_SECRET
            valueFrom:
              secretKeyRef:
                key: github_secret
                name: my-release-atlantis-webhook
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_GH_APP_KEY_FILE
            value: /var/github-app/key.pem
  - it: githubApp vcsSecretName
    template: statefulset.yaml
    set:
      vcsSecretName: atlantis-vcs
      githubApp:
        id: 123456
        slug: foo
    asserts:
      - equal:
          path: spec.template.spec.volumes[1]
          value:
            name: github-app-key-volume
            secret:
              items:
                - key: key.pem
                  path: key.pem
              secretName: atlantis-vcs
      - equal:
          path: spec.template.spec.containers[0].volumeMounts[?(@.name ==
            "github-app-key-volume")]
          value:
            mountPath: /var/github-app
            name: github-app-key-volume
            readOnly: true
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_GH_WEBHOOK_SECRET
            valueFrom:
              secretKeyRef:
                key: github_secret
                name: atlantis-vcs
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_GH_APP_KEY_FILE
            value: /var/github-app/key.pem
  - it: gitlab
    template: statefulset.yaml
    set:
      gitlab:
        user: foo
        token: bar
        secret: baz
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_GITLAB_USER
            value: foo
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_GITLAB_TOKEN
            valueFrom:
              secretKeyRef:
                key: gitlab_token
                name: my-release-atlantis-webhook
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_GITLAB_WEBHOOK_SECRET
            valueFrom:
              secretKeyRef:
                key: gitlab_secret
                name: my-release-atlantis-webhook
  - it: bitbucket
    template: statefulset.yaml
    set:
      bitbucket:
        user: foo
        token: bar
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_BITBUCKET_USER
            value: foo
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_BITBUCKET_TOKEN
            valueFrom:
              secretKeyRef:
                key: bitbucket_token
                name: my-release-atlantis-webhook
  - it: bitbucket server
    template: statefulset.yaml
    set:
      bitbucket:
        user: foo
        token: bar
        secret: baz
        baseURL: https://bitbucket.yourorganization.com
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_BITBUCKET_WEBHOOK_SECRET
            valueFrom:
              secretKeyRef:
                key: bitbucket_secret
                name: my-release-atlantis-webhook
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_BITBUCKET_BASE_URL
            value: https://bitbucket.yourorganization.com
  - it: azuredevops
    template: statefulset.yaml
    set:
      azuredevops:
        user: foo
        token: bar
        webhookUser: bobby
        webhookPassword: bacala
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_AZUREDEVOPS_USER
            value: foo
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_AZUREDEVOPS_TOKEN
            valueFrom:
              secretKeyRef:
                key: azuredevops_token
                name: my-release-atlantis-webhook
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_AZUREDEVOPS_WEBHOOK_USER
            value: bobby
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_AZUREDEVOPS_WEBHOOK_PASSWORD
            valueFrom:
              secretKeyRef:
                key: azuredevops_webhook_password
                name: my-release-atlantis-webhook
  - it: basicAuth
    template: statefulset.yaml
    set:
      basicAuth:
        username: atlantis
        password: forever
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_WEB_BASIC_AUTH
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_WEB_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: my-release-atlantis-basic-auth
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_WEB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: my-release-atlantis-basic-auth
  - it: basicAuthSecretName
    template: statefulset.yaml
    set:
      basicAuthSecretName: atlantis-basic-auth
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_WEB_BASIC_AUTH
            value: "true"
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_WEB_USERNAME
            valueFrom:
              secretKeyRef:
                key: username
                name: atlantis-basic-auth
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_WEB_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: atlantis-basic-auth
  - it: apiSecret
    template: statefulset.yaml
    set:
      api.secret: spongebob
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_API_SECRET
            valueFrom:
              secretKeyRef:
                key: apisecret
                name: my-release-atlantis-api
  - it: apiSecretSecretName
    template: statefulset.yaml
    set:
      apiSecretName: atlantis-api
    asserts:
      - contains:
          path: spec.template.spec.containers[0].env
          content:
            name: ATLANTIS_API_SECRET
            valueFrom:
              secretKeyRef:
                key: apisecret
                name: atlantis-api
  - it: command
    template: statefulset.yaml
    set:
      command:
        - printenv
    asserts:
      - equal:
          path: spec.template.spec.containers[0].command
          value:
            - printenv
  - it: commonLabels
    template: statefulset.yaml
    set:
      commonLabels:
        team: infra
    asserts:
      - equal:
          path: metadata.labels.team
          value: infra
  - it: liveneessProbe false
    template: statefulset.yaml
    set:
      livenessProbe:
        enabled: false
    asserts:
      - notExists:
          path: spec.template.spec.containers[0].livenessProbe
  - it: liveneessProbe
    template: statefulset.yaml
    set:
      livenessProbe:
        enabled: true
        periodSeconds: 10
        initialDelaySeconds: 2
        timeoutSeconds: 1
        successThreshold: 2
        failureThreshold: 3
        scheme: HTTP
    asserts:
      - equal:
          path: spec.template.spec.containers[0].livenessProbe
          value:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 4141
              scheme: HTTP
            initialDelaySeconds: 2
            periodSeconds: 10
            successThreshold: 2
            timeoutSeconds: 1
  - it: readinessProbe false
    template: statefulset.yaml
    set:
      readinessProbe:
        enabled: false
    asserts:
      - notExists:
          path: spec.template.spec.containers[0].readinessProbe
  - it: readinessProbe
    template: statefulset.yaml
    set:
      readinessProbe:
        enabled: true
        periodSeconds: 10
        initialDelaySeconds: 2
        timeoutSeconds: 1
        successThreshold: 2
        failureThreshold: 3
        scheme: HTTP
    asserts:
      - equal:
          path: spec.template.spec.containers[0].readinessProbe
          value:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 4141
              scheme: HTTP
            initialDelaySeconds: 2
            periodSeconds: 10
            successThreshold: 2
            timeoutSeconds: 1
  - it: podTemplate
    template: statefulset.yaml
    set:
      podTemplate:
        annotations:
          iam.amazonaws.com/role: arn:aws:iam::123456789123:role/atlantis-role
        labels:
          group: base
    asserts:
      - equal:
          path: spec.template.metadata.labels.group
          value: base
      - equal:
          path: spec.template.metadata.annotations["iam.amazonaws.com/role"]
          value: arn:aws:iam::123456789123:role/atlantis-role
  - it: Statefulset annotations
    template: statefulset.yaml
    set:
      statefulSet.annotations:
        strong-stuff: "true"
    asserts:
      - equal:
          path: metadata.annotations
          value:
            strong-stuff: "true"
  - it: securityContext
    template: statefulset.yaml
    set:
      statefulSet.securityContext:
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        fsGroupChangePolicy: Always
    asserts:
      - equal:
          path: spec.template.spec.securityContext
          value:
            runAsUser: 1000
            runAsGroup: 1000
            fsGroup: 1000
            fsGroupChangePolicy: Always
  - it: priorityClassName
    template: statefulset.yaml
    set:
      statefulSet.priorityClassName: high-priority
    asserts:
      - equal:
          path: spec.template.spec.priorityClassName
          value: high-priority
  - it: updateStrategy
    template: statefulset.yaml
    set:
      statefulSet.updateStrategy:
        type: RollingUpdate
        rollingUpdate:
          partition: 0
    asserts:
      - equal:
          path: spec.updateStrategy
          value:
            type: RollingUpdate
            rollingUpdate:
              partition: 0
  - it: shareProcessNamespace
    template: statefulset.yaml
    set:
      statefulSet.shareProcessNamespace: true
    asserts:
      - equal:
          path: spec.template.spec.shareProcessNamespace
          value: true
  - it: terminationGracePeriodSeconds
    template: statefulset.yaml
    set:
      terminationGracePeriodSeconds: 30
    asserts:
      - equal:
          path: spec.template.spec.terminationGracePeriodSeconds
          value: 30
  - it: extraPath
    template: statefulset.yaml
    set:
      extraPath: "/foo:/bar"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env
          value:
            - name: PATH
              value: /foo:/bar:/plugins:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
            - name: ATLANTIS_DATA_DIR
              value: /atlantis-data
            - name: ATLANTIS_REPO_ALLOWLIST
              value: <replace-me>
            - name: ATLANTIS_PORT
              value: "4141"
            - name: ATLANTIS_ATLANTIS_URL
              value: http://
  - it: sharedDirPath
    template: statefulset.yaml
    set:
      initConfig.sharedDir: "/home/atlantis"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env
          value:
            - name: PATH
              value: /home/atlantis:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
            - name: ATLANTIS_DATA_DIR
              value: /atlantis-data
            - name: ATLANTIS_REPO_ALLOWLIST
              value: <replace-me>
            - name: ATLANTIS_PORT
              value: "4141"
            - name: ATLANTIS_ATLANTIS_URL
              value: http://
  - it: extraPathWithSharedDirPath
    template: statefulset.yaml
    set:
      initConfig.sharedDir: "/home/atlantis"
      extraPath: "/foo:/bar"
    asserts:
      - equal:
          path: spec.template.spec.containers[0].env
          value:
            - name: PATH
              value: /foo:/bar:/home/atlantis:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
            - name: ATLANTIS_DATA_DIR
              value: /atlantis-data
            - name: ATLANTIS_REPO_ALLOWLIST
              value: <replace-me>
            - name: ATLANTIS_PORT
              value: "4141"
            - name: ATLANTIS_ATLANTIS_URL
              value: http://
